{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","constants.js","containers/App.js","actions.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","type","id","className","src","alt","CardList","robots","map","robo","i","key","SearchBox","searchChange","onChange","placeholder","Scroll","props","style","overflowY","height","children","ErrorBoundary","state","hasError","this","error","setState","React","Component","CHANGE_SEARCH_FIELD","ROBOT_REQUEST_SUCCESS","ROBOT_REQUEST_PENDING","ROBOT_REQUEST_FAILED","App","onRobotRequest","searchField","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","getRobots","isLoading","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.f058f58c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"tachyons\";\r\n\r\nfunction Card({ name, type, id }) {\r\n\r\n  return (\r\n    // text-center, margin, padding\r\n    //display-inlineblock, borderwidth, border-radius\r\n    <div className={\"tc dib grow bg-light-blue bw2 br3 ma2 pa3 shadow-5\"}>\r\n    <img src={`https://robohash.org/robo${id}`} alt = {\"roboPic\"}/>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{type}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\n\r\n//props are passed as a single object\r\nconst CardList = ({robots}) => {\r\n    //here \"props\" could've been used instead of directly destructuring \"robots\"  \r\n  \r\n  return (\r\n    <div>\r\n        \r\n      {robots.map((robo, i) => {\r\n        return (\r\n          <Card\r\n            key={robots[i].id}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            type={robots[i].type}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n    <div className=\"pa2\">\r\n      <input onChange={searchChange} className=\"ba pa3 bw1 b--blue bg-washed-green\" type=\"search\" placeholder=\"Search Robots\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        height: \"500px\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getStateDerivedfromError(error) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError === true) {\r\n      return <h1>Oops! We ran into some error.</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\nexport const ROBOT_REQUEST_SUCCESS = \"ROBOT_REQUEST_SUCCESS\";\r\nexport const ROBOT_REQUEST_PENDING = \"ROBOT_REQUEST_PENDING\";\r\nexport const ROBOT_REQUEST_FAILED = \"ROBOT_REQUEST_FAILED\";","import React from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\nimport { connect } from \"react-redux\";\r\nimport { setSearchBox, requestRobots } from \"../actions\";\r\n\r\n\r\n//since only one reducer, so directly state.searchField is used\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.getRobots.robots,\r\n    isLoading: state.getRobots.isLoading,\r\n    error: state.getRobots.error,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchBox(event.target.value)),\r\n    onRobotRequest: () => dispatch(requestRobots())\r\n  };\r\n};\r\n\r\nclass App extends React.Component {\r\n\r\n  componentDidMount() {\r\n    this.props.onRobotRequest();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots } = this.props;\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n\r\n    return (\r\n      <div className=\"tc\">\r\n        <h1>ROBOCOPS</h1>\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundary>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {CHANGE_SEARCH_FIELD,\r\n    ROBOT_REQUEST_SUCCESS,\r\n    ROBOT_REQUEST_FAILED,\r\n    ROBOT_REQUEST_PENDING} from \"./constants\";\r\n\r\nexport const setSearchBox = text => {\r\nreturn {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    };    \r\n}\r\n\r\nexport const requestRobots = () => dispatch => {\r\n\r\n    dispatch({type: ROBOT_REQUEST_PENDING});\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type: ROBOT_REQUEST_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type: ROBOT_REQUEST_FAILED, payload: error}));\r\n}","import { CHANGE_SEARCH_FIELD, ROBOT_REQUEST_FAILED, ROBOT_REQUEST_PENDING, ROBOT_REQUEST_SUCCESS } from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\",\r\n};\r\n\r\n//a reducer which takes an action and changes the state in the redux store based on the action\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  \r\n    switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\nconst initialStateRobots = {\r\n    isLoading: false,\r\n    robots: [],\r\n    error: \"\"\r\n};\r\n\r\nexport const getRobots = (state = initialStateRobots, action = {}) => {\r\n\r\n    switch (action.type) {\r\n    case ROBOT_REQUEST_PENDING:\r\n      return Object.assign({}, state, { isLoading: true });\r\n    case ROBOT_REQUEST_SUCCESS:\r\n      return Object.assign({}, state, { robots: action.payload, isLoading: false });\r\n    case ROBOT_REQUEST_FAILED:\r\n      return Object.assign({}, state, { isLoading: false, error: action.payload });\r\n      \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { applyMiddleware, createStore, combineReducers } from \"redux\";\r\nimport {Provider} from \"react-redux\";\r\nimport App from \"./containers/App\";\r\nimport { searchRobots, getRobots } from \"./reducers\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { createLogger } from \"redux-logger\";\r\n\r\n\r\nconst rootReducer = combineReducers({searchRobots, getRobots});\r\nconst logger = createLogger();\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store = {store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}